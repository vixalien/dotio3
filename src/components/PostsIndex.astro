---
import { getCollection } from "astro:content";
import PrettyDate from "./PrettyDate.astro";
// import Tags from "./Tags.astro";
import type { CollectionEntry } from "astro:content";

interface Props {
  limit?: number;
}

const { limit = Infinity } = Astro.props;

const posts = (await getCollection("blog"))
  .sort((a, b) => b.data.publish_date.valueOf() - a.data.publish_date.valueOf())
  .slice(0, limit);

type Post = CollectionEntry<"blog">;

const postsByYear = Object.entries(
  posts.reduce(
    (acc, post) => {
      const year = post.data.publish_date.getFullYear().toString();
      acc[year] ??= [];
      acc[year].push(post);
      return acc;
    },
    {} as Record<string, Post[]>,
  ),
).sort(([year1], [year2]) => year2.localeCompare(year1));
---

<div class="posts">
  {
    postsByYear.map(([year, posts]) => {
      if (!posts) return null;

      return (
        <>
          <h3>{year}</h3>
          {posts.map(
            ({
              id,
              data: {
                title,
                description: snippet,
                publish_date,
                hero_image,
                // tags,
              },
            }) => (
              <a class="post" href={`/blog/${id}`}>
                {hero_image ? (
                  <img class="post-image" src={hero_image} alt={title} />
                ) : null}
                <h3 class="post-title">
                  <span>{title}</span> <span class="post-arrow">&rarr;</span>
                </h3>
                <br />
                <small class="intro-meta">
                  {/* {author && <span>{author || ""} at </span>} */}
                  <PrettyDate date={publish_date ?? new Date()} />
                </small>
                <br />
                <span>{snippet}</span>
                <br />
                {/* <Tags tags={tags} /> */}
              </a>
            ),
          )}
        </>
      );
    })
  }
</div>

<style>
  .post {
    --padding: 12px;
    --link: var(--fg);
    --link-bg: #abd5ff;
    --link-bg-hover: #7ebfff;

    background-color: var(--link-bg);
    border-radius: 12px;
    padding: var(--padding);
    margin-inline: calc(-1 * var(--padding));
    display: block;
    margin-bottom: 2em;
    border-bottom: none;
    transition: 0.3s background-color;
  }

  @media screen and (prefers-color-scheme: dark) {
    .post {
      --link-bg: #153e68;
      --link-bg-hover: #2c6fb8;
      --fg: white;
    }
  }

  .post:hover {
    background-color: var(--link-bg-hover);
  }

  .post-arrow {
    display: inline-block;
    transition: 0.3s translate;
  }

  .post:hover .post-arrow,
  .post:focus .post-arrow {
    translate: 10px;
  }

  .post .post-title {
    font-size: 1.1em;
    font-weight: 900;
    border-bottom-width: 2px;
    margin: 0;
    color: inherit;
  }

  .post a.post-image {
    border-bottom: none;
  }

  .post .post-image {
    width: 100%;
    aspect-ratio: 16/9;
    overflow: hidden;
    object-fit: cover;
    border-radius: 6px;
    margin-bottom: 0.5em;
  }
</style>
